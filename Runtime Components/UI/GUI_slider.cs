using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class GUI_slider : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
       if(Canvas == null)
       {
          Debug.LogError("Canvas cannot be null");
       }
       else 
       {
	     byte[] Background_Image = new byte[] 
          {
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
	0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
	0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7A, 0x7A, 0xF4, 0x00, 0x00, 0x00,
	0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xAE, 0xCE, 0x1C, 0xE9, 0x00, 0x00,
	0x00, 0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00, 0xB1, 0x8F, 0x0B, 0xFC,
	0x61, 0x05, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00,
	0x0E, 0xC3, 0x00, 0x00, 0x0E, 0xC3, 0x01, 0xC7, 0x6F, 0xA8, 0x64, 0x00,
	0x00, 0x01, 0x93, 0x49, 0x44, 0x41, 0x54, 0x58, 0x47, 0xED, 0x97, 0xD1,
	0x6A, 0x83, 0x30, 0x14, 0x86, 0xBD, 0xDA, 0xAB, 0x0C, 0x84, 0x41, 0xB5,
	0x3E, 0xD9, 0x2E, 0x0A, 0x3E, 0x84, 0x58, 0xD9, 0xB3, 0x88, 0x17, 0x22,
	0xBE, 0x80, 0x38, 0x11, 0x27, 0x85, 0xBD, 0xC4, 0x60, 0x30, 0x18, 0x14,
	0xDC, 0xF9, 0x43, 0x4F, 0x38, 0x75, 0x69, 0xA7, 0x25, 0x6E, 0xBB, 0xF0,
	0xE2, 0x23, 0x59, 0xE6, 0xF9, 0xFF, 0x3F, 0xD1, 0x92, 0xC4, 0x71, 0x5D,
	0xF7, 0x0C, 0xDF, 0xF7, 0x9D, 0x20, 0x08, 0x14, 0xE8, 0x03, 0xCF, 0xF3,
	0x74, 0x7F, 0x2A, 0xB2, 0x46, 0xEA, 0x8D, 0xFD, 0xD4, 0x83, 0xE8, 0xC8,
	0x16, 0xD8, 0x0E, 0xC0, 0xBA, 0xF0, 0xC0, 0x18, 0xB7, 0x3A, 0x1D, 0x06,
	0x00, 0xFF, 0x4D, 0xDC, 0xD3, 0x03, 0x11, 0x51, 0x51, 0xE1, 0x91, 0xDA,
	0x61, 0x0E, 0xA7, 0x9A, 0x8A, 0x88, 0xA0, 0xC5, 0xBA, 0x63, 0x1F, 0x9D,
	0x4A, 0xB6, 0xC4, 0x23, 0xF1, 0x11, 0x45, 0xD1, 0x90, 0xA6, 0xE9, 0xD0,
	0x75, 0xDD, 0xD0, 0xF7, 0xFD, 0x2C, 0x50, 0x83, 0x5A, 0x68, 0x40, 0xEB,
	0xA4, 0xF9, 0xCD, 0x4B, 0x75, 0x04, 0x77, 0x94, 0x38, 0xDB, 0xED, 0x76,
	0x43, 0x59, 0x96, 0x46, 0xE1, 0x5B, 0x80, 0x16, 0x34, 0xA1, 0x0D, 0x0F,
	0xE9, 0xC9, 0x33, 0x66, 0xF6, 0x61, 0x18, 0x1A, 0x45, 0x6C, 0x00, 0x6D,
	0xBC, 0x12, 0x42, 0x7F, 0x1F, 0xCE, 0x76, 0xBB, 0x65, 0x1E, 0x28, 0xC0,
	0xB1, 0x6D, 0x5B, 0x63, 0xB1, 0x0D, 0x9A, 0xA6, 0x51, 0xDF, 0xC6, 0x66,
	0xB3, 0x71, 0x09, 0x07, 0x9C, 0xCD, 0x3E, 0x8E, 0x63, 0x63, 0xA1, 0x4D,
	0xF0, 0x4D, 0xC8, 0x55, 0x90, 0x01, 0x0E, 0x45, 0x51, 0x18, 0x8B, 0x6C,
	0x92, 0xE7, 0x39, 0x02, 0xBC, 0xE8, 0x00, 0xDC, 0x21, 0x3E, 0x97, 0x5C,
	0x7E, 0xA6, 0xAA, 0x2A, 0xBC, 0x86, 0x37, 0x9E, 0xB8, 0x0C, 0x60, 0x2C,
	0x58, 0x02, 0x78, 0xB1, 0xEF, 0x1A, 0x60, 0x0D, 0xB0, 0x06, 0x58, 0x03,
	0xAC, 0x01, 0xFE, 0x55, 0x80, 0x5F, 0xD9, 0x8C, 0xEA, 0xBA, 0x86, 0xF9,
	0x3B, 0xFB, 0xCA, 0x00, 0xAF, 0x36, 0x8F, 0x61, 0x97, 0xB8, 0xB6, 0x1D,
	0x3F, 0x25, 0x49, 0x62, 0x2C, 0xB2, 0x09, 0x0E, 0x3D, 0xB4, 0x0D, 0xEF,
	0xF5, 0x76, 0x3C, 0x3E, 0x92, 0xDD, 0x72, 0x02, 0x9E, 0x0A, 0x5E, 0x31,
	0x3C, 0xE0, 0xC5, 0xBE, 0x72, 0x05, 0xD4, 0x2A, 0x2C, 0x7D, 0x28, 0x95,
	0xB3, 0x07, 0xF2, 0x48, 0x0E, 0xFE, 0xE6, 0x58, 0x8E, 0x8E, 0x6C, 0x09,
	0x7D, 0x31, 0xC9, 0xB2, 0xCC, 0x28, 0x3A, 0x05, 0xD4, 0xFE, 0x78, 0x31,
	0xB9, 0x74, 0x65, 0x22, 0xF8, 0x6A, 0xF6, 0x4C, 0xF0, 0x6F, 0x77, 0x2E,
	0xA8, 0xBD, 0x7E, 0x35, 0xA3, 0x07, 0xD4, 0x00, 0xB7, 0x48, 0x05, 0xF0,
	0x4F, 0x8C, 0xD9, 0x00, 0x5A, 0xAC, 0xCB, 0x1E, 0xDC, 0xAA, 0x8E, 0x84,
	0x0B, 0x6C, 0x07, 0x60, 0xBD, 0x73, 0x3F, 0xD7, 0xF9, 0x02, 0xA1, 0x98,
	0xE9, 0x4A, 0xC9, 0x1C, 0x84, 0x77, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
	0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
          };
	     byte[] UISprite_Image = new byte[] 
          {
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
	0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
	0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7A, 0x7A, 0xF4, 0x00, 0x00, 0x00,
	0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0E, 0xC4, 0x00, 0x00, 0x0E,
	0xC4, 0x01, 0x95, 0x2B, 0x0E, 0x1B, 0x00, 0x00, 0x02, 0xA8, 0x49, 0x44,
	0x41, 0x54, 0x78, 0x9C, 0xED, 0x57, 0x4D, 0x68, 0x1A, 0x41, 0x14, 0x7E,
	0xEA, 0xBA, 0x1A, 0x2F, 0xF5, 0xE0, 0x21, 0x50, 0x45, 0x84, 0x88, 0x78,
	0x28, 0x04, 0x45, 0x04, 0x89, 0x08, 0x85, 0xC2, 0xF6, 0x24, 0x11, 0x44,
	0x72, 0x13, 0x82, 0x81, 0x8A, 0x3F, 0xF8, 0x43, 0x45, 0xD2, 0x63, 0xA0,
	0xA4, 0xF8, 0x73, 0x11, 0x84, 0x48, 0x6E, 0x81, 0x90, 0x4B, 0x88, 0x87,
	0x42, 0xA0, 0x50, 0x28, 0x01, 0x41, 0x44, 0x09, 0x04, 0x0A, 0xE2, 0xC9,
	0x28, 0x81, 0xE4, 0x2C, 0x88, 0xBF, 0xF4, 0xCD, 0xE2, 0x2E, 0xD6, 0x43,
	0x9B, 0x15, 0x17, 0x2F, 0x7E, 0xF0, 0x31, 0xBB, 0x3B, 0x6F, 0xDF, 0x7C,
	0x33, 0x6F, 0x67, 0xE7, 0x3D, 0x6A, 0x38, 0x1C, 0xC2, 0x3C, 0xE2, 0xF1,
	0x38, 0xD8, 0xED, 0x76, 0x70, 0x3A, 0x9D, 0x70, 0x7D, 0x7D, 0x0D, 0xF5,
	0x7A, 0x1D, 0x9A, 0xCD, 0x26, 0x4C, 0xA7, 0x53, 0x10, 0x02, 0xA9, 0x54,
	0x0A, 0x26, 0x93, 0x09, 0xAC, 0x56, 0x2B, 0x78, 0x3C, 0x1E, 0xB8, 0xBB,
	0xBB, 0x83, 0x6A, 0xB5, 0x0A, 0xB9, 0x5C, 0xEE, 0x2F, 0x3B, 0x0A, 0xD6,
	0x8C, 0x7F, 0x09, 0x30, 0x21, 0x8F, 0x90, 0x2E, 0xE4, 0x2E, 0x52, 0x26,
	0xD0, 0xF7, 0x04, 0x79, 0x8F, 0xFC, 0x85, 0x3C, 0x43, 0x36, 0x85, 0x08,
	0x88, 0x1F, 0x1C, 0x1C, 0x9C, 0x04, 0x83, 0xC1, 0xAD, 0xE3, 0xE3, 0x63,
	0x76, 0x29, 0xC9, 0x92, 0x0A, 0x01, 0x86, 0x4C, 0x86, 0xA1, 0xB3, 0x62,
	0x08, 0xAD, 0xE8, 0xEB, 0x13, 0xFA, 0xFA, 0x82, 0x8F, 0x73, 0x8B, 0x76,
	0x8B, 0x02, 0x68, 0x64, 0xB9, 0xD3, 0xE9, 0x30, 0x57, 0x57, 0x57, 0xA0,
	0xD3, 0xE9, 0x60, 0x59, 0x10, 0xC1, 0x66, 0xB3, 0x99, 0xA5, 0xCB, 0xE5,
	0xDA, 0xBA, 0xB8, 0xB8, 0xC8, 0xE2, 0xE3, 0x0F, 0x48, 0x37, 0x92, 0xFF,
	0xF0, 0xA8, 0x76, 0xBB, 0xCD, 0xBF, 0x74, 0x73, 0x73, 0xF3, 0x4D, 0xAF,
	0xD7, 0x33, 0xC9, 0x64, 0x12, 0x56, 0x09, 0x32, 0x91, 0x74, 0x3A, 0x0D,
	0x99, 0x4C, 0x86, 0x29, 0x14, 0x0A, 0x5F, 0xDD, 0x6E, 0x77, 0x82, 0x17,
	0x30, 0x67, 0xF7, 0x0E, 0x67, 0x1D, 0xAA, 0x54, 0x2A, 0xEC, 0x0D, 0xF9,
	0xEA, 0xC7, 0xE3, 0x31, 0xDB, 0x0A, 0xDD, 0x01, 0x1C, 0xC8, 0x2A, 0x10,
	0x52, 0x14, 0xC5, 0xB6, 0xE1, 0x70, 0x18, 0xF6, 0xF6, 0xF6, 0xA2, 0x28,
	0xE0, 0x1C, 0xBB, 0x7F, 0xB3, 0x02, 0x70, 0xD6, 0x9C, 0xFD, 0x21, 0x6E,
	0x41, 0x99, 0x5C, 0x2E, 0x67, 0x07, 0x5E, 0xDC, 0x9E, 0xCB, 0x80, 0x13,
	0x4F, 0xFC, 0xD1, 0x34, 0x0D, 0x0A, 0x85, 0x02, 0xA2, 0xD1, 0xA8, 0xAC,
	0x5C, 0x2E, 0x1F, 0x62, 0x37, 0xBB, 0x0A, 0x14, 0x37, 0x63, 0x04, 0x93,
	0xCF, 0xE7, 0x61, 0x30, 0x18, 0xC0, 0x64, 0x32, 0x81, 0x55, 0x83, 0x4C,
	0x88, 0xF8, 0x75, 0x38, 0x1C, 0x90, 0x4A, 0xA5, 0x18, 0x5E, 0xC0, 0xD3,
	0xD3, 0x13, 0x67, 0x63, 0xD0, 0x68, 0x34, 0xA2, 0x0C, 0xCE, 0x81, 0xF8,
	0x56, 0xAB, 0xD5, 0xF0, 0xF2, 0xF2, 0xF2, 0x96, 0x7B, 0x46, 0x8D, 0x46,
	0x23, 0xEE, 0x9A, 0x96, 0x48, 0x24, 0x20, 0x36, 0x94, 0x4A, 0x25, 0xF4,
	0x7A, 0xBD, 0x37, 0xBC, 0x00, 0x58, 0x33, 0x36, 0x02, 0x36, 0x02, 0x36,
	0x02, 0x36, 0x02, 0x36, 0x02, 0x28, 0x72, 0xFC, 0xCE, 0x30, 0xC4, 0x73,
	0x81, 0x9E, 0xBB, 0x17, 0x05, 0xFD, 0x7E, 0x1F, 0x54, 0x2A, 0x55, 0x8F,
	0x17, 0xB0, 0xBD, 0xBD, 0xCD, 0x5D, 0x3F, 0x3E, 0x3F, 0x3F, 0xEF, 0x68,
	0xB5, 0x5A, 0x51, 0x05, 0xE0, 0x18, 0x80, 0x63, 0x3E, 0xF2, 0x02, 0xC8,
	0xF9, 0x3C, 0xC3, 0x2D, 0xE6, 0xED, 0x21, 0xB1, 0x05, 0xD4, 0x6A, 0x35,
	0x52, 0x77, 0xFC, 0xE0, 0x05, 0x90, 0xA2, 0x61, 0x86, 0x33, 0x92, 0xBD,
	0xEE, 0xEF, 0xEF, 0xCB, 0x84, 0x66, 0xC0, 0xAF, 0x05, 0x39, 0xFA, 0x31,
	0x27, 0x9C, 0x5C, 0x5E, 0x5E, 0x9E, 0xF3, 0x02, 0x48, 0xF5, 0x33, 0xC3,
	0x83, 0xD7, 0xEB, 0x2D, 0xA2, 0x41, 0x28, 0x12, 0x89, 0x88, 0x22, 0xA0,
	0x58, 0x2C, 0x82, 0xCF, 0xE7, 0x2B, 0x60, 0x1A, 0xF8, 0xC0, 0x0B, 0x88,
	0xC5, 0x62, 0xF3, 0x36, 0x09, 0xCC, 0x0B, 0x77, 0xB2, 0xD9, 0x2C, 0x83,
	0x86, 0xB0, 0xAA, 0x70, 0x74, 0xBB, 0x5D, 0x20, 0x69, 0x3E, 0x66, 0x42,
	0xB7, 0x58, 0x9A, 0x7D, 0x9E, 0xEF, 0x5B, 0xDC, 0x86, 0x43, 0x8C, 0xCF,
	0x47, 0x6C, 0xE3, 0x7E, 0xBF, 0xFF, 0x24, 0x10, 0x08, 0x6C, 0x59, 0x2C,
	0x16, 0x30, 0x1A, 0x8D, 0x4B, 0x0D, 0xDC, 0x6A, 0xB5, 0xA0, 0xD1, 0x68,
	0x40, 0xA9, 0x54, 0xEA, 0x93, 0xC2, 0xC4, 0x60, 0x30, 0xFC, 0xB7, 0x30,
	0x61, 0x8B, 0x52, 0x44, 0x0E, 0xDB, 0xEF, 0x18, 0x9E, 0xA3, 0xD3, 0xD3,
	0xD3, 0xF7, 0x58, 0xE1, 0xEC, 0x2E, 0x23, 0x00, 0x2B, 0xAA, 0x7B, 0x9B,
	0xCD, 0xF6, 0x13, 0x63, 0x2E, 0xB8, 0x34, 0x83, 0xD9, 0x0B, 0x09, 0x10,
	0x19, 0x6B, 0xFF, 0x13, 0xFE, 0x01, 0x06, 0xD2, 0x00, 0x12, 0x3C, 0x75,
	0xD4, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42,
	0x60, 0x82
          };
          byte[] Knob_Image = new byte[] 
          {
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
	0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40,
	0x08, 0x06, 0x00, 0x00, 0x00, 0xAA, 0x69, 0x71, 0xDE, 0x00, 0x00, 0x00,
	0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xAE, 0xCE, 0x1C, 0xE9, 0x00, 0x00,
	0x00, 0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00, 0xB1, 0x8F, 0x0B, 0xFC,
	0x61, 0x05, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00,
	0x0E, 0xC3, 0x00, 0x00, 0x0E, 0xC3, 0x01, 0xC7, 0x6F, 0xA8, 0x64, 0x00,
	0x00, 0x07, 0x15, 0x49, 0x44, 0x41, 0x54, 0x78, 0x5E, 0xE5, 0x9B, 0x3D,
	0x8B, 0x15, 0x49, 0x14, 0x86, 0x2F, 0x98, 0x2E, 0x08, 0xFE, 0x00, 0x7F,
	0x80, 0x91, 0x1F, 0xB0, 0x18, 0x18, 0x98, 0x6A, 0x26, 0xAC, 0xC9, 0x82,
	0x20, 0x66, 0xC2, 0x06, 0xA2, 0x99, 0xA1, 0xA0, 0x60, 0x22, 0x83, 0x46,
	0x82, 0xE9, 0xC2, 0x1A, 0x08, 0x22, 0xC8, 0x80, 0x91, 0x30, 0x30, 0x28,
	0x88, 0x8A, 0xA8, 0xEC, 0x3F, 0x98, 0x48, 0x10, 0x44, 0x74, 0x74, 0xB4,
	0xB6, 0x9F, 0x76, 0xDE, 0xE6, 0x4C, 0xF9, 0xF6, 0xBD, 0x55, 0x75, 0xEF,
	0xDC, 0x85, 0xDD, 0x86, 0xC7, 0xAE, 0x73, 0xAA, 0xEA, 0x9C, 0xF7, 0x9C,
	0xEA, 0xBE, 0x73, 0x75, 0x70, 0x92, 0x52, 0xB2, 0x9C, 0x3E, 0x7D, 0x7A,
	0x94, 0x23, 0x47, 0x8E, 0x58, 0x9F, 0xFC, 0x1A, 0x1F, 0x3E, 0x7C, 0xB8,
	0xE7, 0xE8, 0xD1, 0xA3, 0x3D, 0xF2, 0x1D, 0x3A, 0x74, 0x68, 0xB8, 0xC7,
	0x31, 0x77, 0xD6, 0x68, 0x3D, 0xB6, 0x7C, 0x40, 0xEC, 0x03, 0x07, 0x0E,
	0xF4, 0xC4, 0xDC, 0xCA, 0x99, 0xFB, 0x22, 0xAE, 0x46, 0xB0, 0x4E, 0x17,
	0xA0, 0x06, 0x8A, 0x51, 0xB1, 0x2A, 0xAE, 0xB6, 0x01, 0xB2, 0xE5, 0xC3,
	0x76, 0xB9, 0x6A, 0x70, 0xB5, 0xFE, 0xE4, 0x20, 0xD9, 0x3C, 0x90, 0x48,
	0x63, 0x15, 0xA0, 0x13, 0x95, 0x2F, 0x16, 0x1D, 0xC7, 0xDC, 0x59, 0xA3,
	0xF5, 0xD8, 0xF2, 0x01, 0xB1, 0xF5, 0x04, 0xB4, 0x92, 0xD7, 0xBB, 0xC3,
	0x50, 0xA2, 0x56, 0xD4, 0x69, 0x8A, 0xC1, 0x56, 0x01, 0xD8, 0xB5, 0x0D,
	0x90, 0x2D, 0x1F, 0xB6, 0xE2, 0x63, 0xCF, 0x43, 0xAC, 0x79, 0x18, 0x28,
	0x78, 0x2B, 0x0A, 0x1E, 0xC7, 0x2A, 0x40, 0x27, 0x2A, 0x5F, 0x2C, 0x3A,
	0x8E, 0xB9, 0xB3, 0x46, 0xEB, 0xB1, 0xE5, 0x03, 0x62, 0xEB, 0x24, 0x63,
	0xEE, 0x16, 0x76, 0x34, 0xC0, 0x2D, 0x10, 0xB1, 0xF3, 0x0E, 0x37, 0x8F,
	0x2F, 0x36, 0x00, 0xBB, 0xB6, 0x01, 0xB2, 0xE5, 0xC3, 0x76, 0x79, 0x72,
	0x5F, 0x64, 0xD6, 0x7C, 0xDF, 0x00, 0x82, 0x2F, 0x12, 0x02, 0x6B, 0xAC,
	0x02, 0x74, 0xA2, 0xF2, 0xA9, 0x38, 0xEE, 0x71, 0xCC, 0x9D, 0x35, 0x5A,
	0x8F, 0x2D, 0x1F, 0x10, 0x3B, 0xBE, 0xCF, 0x80, 0x3F, 0xF7, 0x45, 0x66,
	0xCD, 0x0F, 0xC1, 0x73, 0x62, 0x62, 0x87, 0x9B, 0x57, 0x67, 0x29, 0x46,
	0x6B, 0x00, 0xBB, 0xB6, 0x01, 0xB2, 0xE5, 0xC3, 0x56, 0x7C, 0xEC, 0x88,
	0xD6, 0x8C, 0x31, 0x6D, 0x7E, 0x08, 0x1A, 0x61, 0xC2, 0xF9, 0x85, 0x9B,
	0x57, 0xC0, 0x38, 0x56, 0x01, 0x3A, 0x51, 0xF9, 0x62, 0xD1, 0x71, 0xCC,
	0x9D, 0x35, 0x5A, 0x8F, 0x2D, 0x1F, 0x10, 0x5B, 0x27, 0x17, 0x73, 0x2B,
	0x67, 0xEE, 0x8B, 0x8C, 0xCD, 0x5B, 0xE7, 0x34, 0xE2, 0x49, 0x8C, 0xC1,
	0x1A, 0x12, 0xAA, 0x00, 0xEC, 0xDA, 0x06, 0xC8, 0x96, 0x0F, 0xDB, 0xE5,
	0x8A, 0x94, 0xAC, 0xC9, 0xE9, 0x83, 0x97, 0x22, 0x31, 0xD3, 0x20, 0xA8,
	0xC6, 0x2A, 0x40, 0x27, 0x2A, 0x5F, 0x2C, 0x3A, 0x8E, 0xB9, 0xB3, 0x46,
	0xEB, 0xB1, 0xE5, 0x03, 0x62, 0xC7, 0xF7, 0xD7, 0xC1, 0x7A, 0xE7, 0x1F,
	0x63, 0x08, 0x3E, 0x8B, 0x28, 0x64, 0x0C, 0x75, 0x95, 0x62, 0xB0, 0x55,
	0x00, 0x76, 0x6D, 0x03, 0x64, 0xCB, 0x87, 0xAD, 0xF8, 0xD8, 0xD3, 0xD0,
	0x9E, 0x12, 0x86, 0xA0, 0xD3, 0x20, 0xA0, 0xF3, 0x47, 0x14, 0x30, 0x8E,
	0x55, 0x80, 0x4E, 0x54, 0xBE, 0x58, 0x74, 0x1C, 0x73, 0x67, 0x8D, 0xD6,
	0x63, 0xCB, 0x07, 0xC4, 0xD6, 0xC9, 0xC5, 0xDC, 0x0E, 0xF6, 0x39, 0x7F,
	0xCE, 0x8E, 0xCE, 0x3A, 0x5A, 0xE6, 0xF1, 0xC5, 0x06, 0x60, 0xD7, 0x36,
	0x40, 0xB6, 0x7C, 0xD8, 0x2E, 0x4F, 0xEE, 0x8B, 0x94, 0xCC, 0xF7, 0xC1,
	0x17, 0x09, 0x81, 0x35, 0x56, 0x01, 0xDB, 0x27, 0xBA, 0xAF, 0xF3, 0xFD,
	0xDE, 0xD9, 0xB7, 0xBB, 0xC4, 0x4F, 0xBB, 0xFB, 0xB3, 0xEE, 0xBE, 0x05,
	0xDB, 0x63, 0x7C, 0xB7, 0x59, 0xC3, 0x5A, 0xF6, 0xB0, 0x17, 0x14, 0x8F,
	0xD8, 0xF1, 0xFD, 0x05, 0xFC, 0xB9, 0x2F, 0x32, 0x6B, 0x7E, 0x08, 0x9E,
	0x13, 0x13, 0x3B, 0xDC, 0x7C, 0xEC, 0xAC, 0xD6, 0x74, 0x9C, 0xEA, 0xEC,
	0x47, 0xC7, 0x8F, 0x1F, 0x4F, 0x97, 0x2F, 0x5F, 0x4E, 0xF7, 0xEE, 0xDD,
	0x4B, 0xAF, 0x5F, 0xBF, 0x4E, 0x6F, 0xDF, 0xBE, 0x4D, 0xDF, 0xBE, 0x7D,
	0xEB, 0x61, 0x8C, 0x8F, 0x39, 0xD6, 0xB0, 0x96, 0x3D, 0xEC, 0x55, 0x1E,
	0x62, 0x2A, 0x7E, 0xCC, 0xA9, 0x3C, 0xB9, 0x2F, 0x32, 0x6D, 0x7E, 0x08,
	0x1A, 0x61, 0xC2, 0xF9, 0x85, 0x9B, 0x57, 0xC0, 0x30, 0xFE, 0xB5, 0x4B,
	0xBC, 0x7E, 0xE9, 0xD2, 0xA5, 0xF4, 0xE4, 0xC9, 0x93, 0xEE, 0x5B, 0x67,
	0xDD, 0xC5, 0x1E, 0xF6, 0x12, 0x83, 0x58, 0x8A, 0xAD, 0x93, 0x8B, 0xB9,
	0x95, 0x33, 0xF7, 0x45, 0xC6, 0xE6, 0xAD, 0x73, 0x4E, 0xF6, 0x74, 0xA7,
	0xB5, 0x72, 0xE6, 0xCC, 0x99, 0xF4, 0xE0, 0xC1, 0x83, 0xED, 0x72, 0xDA,
	0x2F, 0x62, 0x10, 0x8B, 0x98, 0xC4, 0xCE, 0x72, 0xCD, 0x8D, 0x4E, 0x6B,
	0x51, 0xEC, 0xED, 0x4E, 0x6C, 0xF5, 0xFA, 0xF5, 0xEB, 0xE9, 0xCB, 0x97,
	0x2F, 0xDB, 0x25, 0xFC, 0xB8, 0xBE, 0x7F, 0xFF, 0x9E, 0xBE, 0x7E, 0xFD,
	0x9A, 0x36, 0x37, 0x37, 0xD3, 0xA7, 0x4F, 0x9F, 0x7A, 0x3E, 0x7E, 0xFC,
	0xD8, 0x23, 0x9B, 0x39, 0xD6, 0xB0, 0x36, 0x5E, 0xC4, 0x22, 0x26, 0xB1,
	0xBB, 0xD3, 0xFF, 0x45, 0x4F, 0xC1, 0x22, 0x88, 0xE2, 0xE7, 0x85, 0xE2,
	0xDF, 0xDC, 0xBC, 0x79, 0x73, 0x5B, 0xF6, 0x8F, 0x6B, 0x6B, 0x6B, 0x2B,
	0x7D, 0xFE, 0xFC, 0x39, 0xA9, 0xD8, 0x52, 0xD8, 0xC3, 0xDE, 0x78, 0xAD,
	0xAC, 0xAC, 0xD0, 0x84, 0x37, 0xE4, 0xCA, 0x72, 0x37, 0x63, 0x1F, 0x8B,
	0x06, 0xF6, 0x70, 0x3A, 0xB1, 0x78, 0x3E, 0xDC, 0xE2, 0x29, 0xB7, 0x42,
	0x0C, 0x62, 0xE9, 0x22, 0x07, 0xB9, 0xC8, 0x99, 0x69, 0x68, 0xA2, 0xFF,
	0x74, 0x5D, 0x00, 0x2B, 0x3C, 0xA2, 0xBA, 0x78, 0x94, 0x5D, 0x31, 0xF3,
	0x40, 0x4C, 0x5D, 0xE4, 0x22, 0x67, 0xA6, 0xA1, 0x89, 0x89, 0x7B, 0x2C,
	0x2A, 0x39, 0x76, 0xEE, 0xDC, 0xB9, 0xFE, 0x3D, 0xE5, 0xDD, 0x6D, 0x79,
	0xDC, 0x4B, 0x21, 0x36, 0x17, 0xB9, 0xC8, 0x49, 0xEE, 0x4C, 0x4B, 0x35,
	0xB6, 0x2B, 0x95, 0xAC, 0xAD, 0xAE, 0xAE, 0xF6, 0xC5, 0x2F, 0xE2, 0x91,
	0x9F, 0x05, 0x39, 0xC8, 0x45, 0x4E, 0x72, 0x67, 0x5A, 0xAA, 0xD1, 0x97,
	0x95, 0x56, 0x4E, 0xF1, 0xB3, 0x9A, 0x6B, 0x37, 0x4F, 0x3E, 0x47, 0x4F,
	0xC2, 0xF6, 0xF7, 0x84, 0xFE, 0xCB, 0x52, 0x2B, 0xD6, 0x59, 0xC1, 0x3A,
	0x5F, 0x58, 0x76, 0xE3, 0x9D, 0x9F, 0x05, 0x39, 0xC9, 0x8D, 0x86, 0x4C,
	0x53, 0x15, 0x13, 0xF7, 0x5E, 0x14, 0xB2, 0xFF, 0xE4, 0xC9, 0x93, 0xFD,
	0x27, 0xB4, 0x13, 0xB8, 0x0C, 0xC8, 0x8D, 0x06, 0xB4, 0x64, 0xDA, 0x8A,
	0xB1, 0x5D, 0x29, 0xE4, 0xFC, 0xB5, 0x6B, 0xD7, 0x96, 0xF2, 0xDE, 0x8F,
	0x41, 0x6E, 0x34, 0xA0, 0x25, 0xD3, 0x56, 0x8C, 0xFD, 0x60, 0x28, 0xE4,
	0xCF, 0x87, 0x0F, 0x1F, 0x5A, 0x61, 0xCB, 0x04, 0x0D, 0x68, 0xC9, 0xB4,
	0x15, 0x63, 0xBB, 0x52, 0xC8, 0x8B, 0x57, 0xAF, 0x5E, 0x59, 0x51, 0xCB,
	0x04, 0x0D, 0x68, 0xC9, 0xB4, 0x15, 0x63, 0xBB, 0x52, 0xC8, 0xBB, 0x8D,
	0x8D, 0x0D, 0x2B, 0x6A, 0x99, 0xA0, 0x01, 0x2D, 0x99, 0xB6, 0x62, 0x6C,
	0x57, 0x0A, 0xD9, 0x7C, 0xFF, 0xFE, 0xBD, 0x15, 0xB5, 0x4C, 0xD0, 0x80,
	0x96, 0x4C, 0x5B, 0x31, 0xD6, 0x59, 0xC8, 0x7F, 0xA3, 0x01, 0xEE, 0xB1,
	0x28, 0xE4, 0x7F, 0xFF, 0x0A, 0xBC, 0x78, 0xF9, 0xF2, 0xA5, 0x15, 0xB5,
	0x4C, 0xD0, 0x80, 0x96, 0x4C, 0x5B, 0x31, 0xD6, 0x59, 0xC8, 0x5F, 0xFC,
	0x6B, 0x8D, 0x13, 0xB5, 0x4C, 0xEE, 0xDF, 0xBF, 0xFF, 0xAF, 0xFD, 0x18,
	0x3C, 0x7F, 0xE5, 0xCA, 0x15, 0x2B, 0x6A, 0x99, 0xA0, 0x01, 0x2D, 0x99,
	0xB6, 0x62, 0x26, 0xEE, 0xEB, 0x61, 0x21, 0xFB, 0x4F, 0x9C, 0x38, 0x91,
	0x9C, 0xA8, 0x65, 0x82, 0x06, 0xB4, 0x64, 0xDA, 0x8A, 0xB1, 0x5D, 0xA9,
	0x60, 0xFD, 0xF1, 0xE3, 0xC7, 0xC9, 0x09, 0x5B, 0x06, 0xE4, 0x46, 0x43,
	0xA6, 0xA9, 0x0A, 0xEB, 0xAC, 0xE0, 0xD4, 0x85, 0x0B, 0x17, 0xAC, 0xB8,
	0x65, 0x40, 0x6E, 0x34, 0x64, 0x9A, 0xAA, 0xB0, 0x1F, 0x0C, 0x95, 0xAC,
	0xF1, 0x41, 0xE4, 0x04, 0xEE, 0x26, 0xE4, 0xEC, 0x0A, 0x98, 0xEB, 0xF4,
	0x61, 0xE2, 0xDE, 0x8B, 0x4A, 0x8E, 0x9D, 0x3D, 0x7B, 0x36, 0x7D, 0xF8,
	0xF0, 0x21, 0x39, 0xA1, 0xBB, 0x01, 0xB9, 0xC8, 0x49, 0xEE, 0x4C, 0x4B,
	0x35, 0xB6, 0x2B, 0x0D, 0xDC, 0xBA, 0x7A, 0xF5, 0x6A, 0x72, 0x62, 0x77,
	0x03, 0x72, 0x91, 0x33, 0xD3, 0xD0, 0x84, 0xFD, 0xA7, 0xE2, 0x06, 0xF8,
	0x6D, 0xD0, 0xA3, 0x1B, 0x37, 0x6E, 0x58, 0xC1, 0x8B, 0x84, 0x1C, 0xE4,
	0x22, 0x67, 0xA6, 0xA1, 0x89, 0x89, 0x7B, 0x2C, 0x1A, 0xD9, 0xDB, 0x09,
	0xFB, 0x9B, 0x5F, 0x5E, 0x38, 0xE1, 0x8B, 0x80, 0xD8, 0xE4, 0x20, 0x57,
	0x96, 0xBB, 0x19, 0xFD, 0xEA, 0x7A, 0x51, 0xEC, 0xE3, 0x74, 0x78, 0x44,
	0x17, 0xF9, 0x99, 0x40, 0x2C, 0x62, 0x12, 0x9B, 0x1C, 0x59, 0xCE, 0xB9,
	0xB0, 0x8F, 0xC5, 0x9C, 0xF0, 0x5B, 0xA2, 0x5B, 0x7C, 0x48, 0x2D, 0xE2,
	0xA7, 0x03, 0x31, 0x88, 0x45, 0x4C, 0x62, 0x67, 0xB9, 0xE6, 0xC6, 0x3A,
	0x79, 0x34, 0x9C, 0x5F, 0xB8, 0x79, 0x75, 0x54, 0xF3, 0x1D, 0xC7, 0xBA,
	0x13, 0x7B, 0x7A, 0xF1, 0xE2, 0xC5, 0xB4, 0xB6, 0xB6, 0xD6, 0x17, 0x53,
	0x03, 0x7B, 0xD8, 0x4B, 0x0C, 0x62, 0x29, 0x67, 0xCC, 0x13, 0x71, 0x9A,
	0x22, 0x63, 0xF3, 0xFD, 0x84, 0xA3, 0x4B, 0x6C, 0xFD, 0xC2, 0xCD, 0x2B,
	0x28, 0x9F, 0xAE, 0xD8, 0x07, 0x0F, 0x1E, 0x84, 0xDF, 0x3A, 0x7B, 0x9D,
	0xAF, 0xAC, 0x3C, 0xC6, 0x77, 0xEF, 0xDE, 0x4D, 0xCF, 0x9F, 0x3F, 0xEF,
	0xFF, 0x16, 0xA7, 0x62, 0x19, 0xE3, 0x63, 0x8E, 0x35, 0xAC, 0x65, 0x0F,
	0x7B, 0x89, 0x41, 0x2C, 0x62, 0x2A, 0x7E, 0xCC, 0x09, 0x2D, 0x5A, 0xC5,
	0xD0, 0x51, 0x07, 0x0B, 0x9C, 0x5F, 0xB8, 0xF9, 0x28, 0x90, 0xC4, 0x2A,
	0xA0, 0x63, 0x7F, 0x67, 0xFF, 0xD1, 0x15, 0x72, 0xA7, 0xE3, 0x59, 0x07,
	0x7F, 0x85, 0xA5, 0x50, 0x60, 0x8C, 0xEF, 0x0E, 0x6B, 0x58, 0xCB, 0x1E,
	0xF6, 0x46, 0xF1, 0xC4, 0xCE, 0xF3, 0xE1, 0xCF, 0x7D, 0x91, 0x59, 0xF3,
	0x3B, 0x3A, 0xEB, 0x68, 0x99, 0xC7, 0xA7, 0x02, 0x40, 0x36, 0xC5, 0x30,
	0x9E, 0x86, 0x0A, 0x66, 0xAC, 0xFD, 0xB2, 0x5D, 0x9E, 0xDC, 0x17, 0x29,
	0x99, 0xB7, 0x13, 0x39, 0x88, 0x72, 0xFE, 0x88, 0x3A, 0xCA, 0x18, 0xC1,
	0x2A, 0x58, 0x05, 0xC8, 0x26, 0xE9, 0x34, 0xD4, 0x00, 0x60, 0x6F, 0xB4,
	0xF3, 0x3C, 0xD3, 0x28, 0xD1, 0x0C, 0x43, 0xF0, 0x59, 0x44, 0x21, 0x63,
	0x28, 0x28, 0x85, 0x60, 0xEB, 0x04, 0x65, 0xD7, 0x34, 0x80, 0xB1, 0xF6,
	0xCB, 0x56, 0x7C, 0xEC, 0x69, 0x94, 0x68, 0x15, 0x43, 0x47, 0x4B, 0x20,
	0xB0, 0xF3, 0x47, 0xA2, 0x40, 0xD6, 0xAB, 0x00, 0xD9, 0xB1, 0x58, 0x47,
	0x14, 0xCF, 0xDE, 0x68, 0x13, 0xDB, 0xE5, 0x8C, 0x94, 0x68, 0x8C, 0x0C,
	0x5D, 0x2D, 0x05, 0x91, 0xCE, 0x1F, 0x61, 0x8D, 0x0A, 0x00, 0xD9, 0x35,
	0x0D, 0x60, 0xAC, 0xFD, 0xB2, 0x5D, 0xAE, 0x48, 0xC9, 0x9A, 0x1C, 0xEB,
	0x54, 0xB7, 0xC7, 0x70, 0xF3, 0xEA, 0xA8, 0xE6, 0x81, 0x62, 0x54, 0x80,
	0x6C, 0x15, 0x3A, 0x86, 0x1A, 0x00, 0xEC, 0x8D, 0x76, 0x9E, 0x27, 0xA2,
	0xF9, 0x31, 0xC6, 0xE6, 0x87, 0xE0, 0x39, 0x31, 0xB1, 0xC3, 0xCD, 0x2B,
	0x28, 0x85, 0x60, 0xEB, 0x04, 0x65, 0xD7, 0x34, 0x80, 0xB1, 0xF6, 0xCB,
	0x56, 0x7C, 0xEC, 0x48, 0x8B, 0x56, 0x31, 0x74, 0xD4, 0xC1, 0x02, 0xE7,
	0x17, 0x6E, 0x3E, 0x0A, 0x24, 0xB1, 0x0A, 0x90, 0x1D, 0x8B, 0x75, 0x44,
	0xB1, 0xEC, 0x8D, 0x36, 0xB1, 0xF3, 0x7C, 0xF8, 0x73, 0x5F, 0x64, 0xD6,
	0xFC, 0xCC, 0xFF, 0x34, 0x85, 0x28, 0xE7, 0x17, 0x6E, 0x1E, 0x9F, 0x0A,
	0x00, 0xD9, 0x35, 0x0D, 0x60, 0xAC, 0xFD, 0xB2, 0x5D, 0x9E, 0xDC, 0x17,
	0x99, 0x35, 0x4F, 0xED, 0xFD, 0x1F, 0xB3, 0x9A, 0x50, 0x82, 0x3A, 0xCA,
	0x18, 0xC1, 0x2A, 0x58, 0x05, 0xC8, 0x46, 0xD4, 0x34, 0xE2, 0x89, 0xB3,
	0x37, 0xDA, 0x79, 0x9E, 0x79, 0x50, 0xDD, 0xC3, 0x00, 0x94, 0xA8, 0x15,
	0x05, 0xA7, 0x10, 0x6C, 0x9D, 0xA0, 0xEC, 0x9A, 0x06, 0x30, 0xD6, 0x7E,
	0xD9, 0x8A, 0x8F, 0x3D, 0x0F, 0xB1, 0xE6, 0x1D, 0x06, 0xA8, 0xC3, 0xAD,
	0x44, 0x81, 0x14, 0xA3, 0x02, 0x64, 0xC7, 0x62, 0x1D, 0xF1, 0xC4, 0xD9,
	0x1B, 0x6D, 0x62, 0xBB, 0x9C, 0x35, 0xE4, 0xF5, 0xFE, 0xE4, 0x00, 0x75,
	0xBA, 0x15, 0x0A, 0x51, 0x01, 0x20, 0xBB, 0xA6, 0x01, 0x8C, 0xB5, 0x5F,
	0xB6, 0xCB, 0x55, 0x83, 0xAB, 0xD5, 0x3A, 0xC1, 0x05, 0x10, 0x3A, 0x8D,
	0x88, 0x3A, 0xAC, 0x79, 0x15, 0xAC, 0x02, 0x64, 0xC7, 0x62, 0x1D, 0xF1,
	0xC4, 0xD9, 0x1B, 0xED, 0x3C, 0x4F, 0x44, 0xF3, 0x63, 0xB8, 0x1A, 0x53,
	0x4A, 0x93, 0x7F, 0x00, 0xC2, 0xA3, 0x9E, 0x69, 0x02, 0x5E, 0x3D, 0xF7,
	0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
          };
          Texture2D UISprite_Sprite = new Texture2D(2, 2);
          Texture2D Knob_Sprite = new Texture2D(2, 2);
          Texture2D Background_Sprite = new Texture2D(2, 2);
          UISprite_Sprite.LoadImage(UISprite_Image);
          Knob_Sprite.LoadImage(Knob_Image);
          Background_Sprite.LoadImage(Background_Image);
          GameObject Slider = new GameObject("Slider", typeof(Slider));
          Slider.transform.SetParent(Canvas.transform);
          Slider.GetComponent<RectTransform>().sizeDelta = new Vector2 (160, 20);
          GameObject Background = new GameObject("Background", typeof(Image));
          Background.transform.SetParent(Slider.transform);
          Background.GetComponent<Image>().sprite = Sprite.Create(Background_Sprite, new Rect(0.0f, 0.0f, Background_Sprite.width, Background_Sprite.height), new Vector2(16f, 16f), 200.0f, 0, SpriteMeshType.Tight, new Vector4(10,10,10,10));
          Background.GetComponent<RectTransform>().anchorMin = new Vector2 (0f, 0.25f);
          Background.GetComponent<RectTransform>().anchorMax = new Vector2 (1f, 0.75f);
          Background.GetComponent<RectTransform>().sizeDelta = new Vector2 (0, 0);
          Background.GetComponent<Image>().type = Image.Type.Sliced;
          GameObject Fill_Area = new GameObject("Fill Area", typeof(RectTransform));
          Fill_Area.transform.SetParent(Slider.transform);
          Fill_Area.GetComponent<RectTransform>().anchorMin = new Vector2 (0f, 0.25f);
          Fill_Area.GetComponent<RectTransform>().anchorMax = new Vector2 (1f, 0.75f);
          Fill_Area.GetComponent<RectTransform>().sizeDelta = new Vector2 (-20f, 0);
          Fill_Area.GetComponent<RectTransform>().position = new Vector3(-5,0,0);
          GameObject Fill = new GameObject("Fill", typeof(Image));
          Fill.GetComponent<Image>().type = Image.Type.Sliced;
          Fill.GetComponent<Image>().sprite = Sprite.Create(UISprite_Sprite, new Rect(0.0f, 0.0f, UISprite_Sprite.width, UISprite_Sprite.height), new Vector2(16f, 16f), 200.0f, 0, SpriteMeshType.Tight, new Vector4(10,10,10,10));
          Slider.GetComponent<Slider>().fillRect = Fill.GetComponent<RectTransform>();
          Fill.transform.SetParent(Fill_Area.transform);
          Fill.GetComponent<RectTransform>().position = new Vector3(-5,0,0);
          Fill.GetComponent<RectTransform>().sizeDelta = new Vector2 (10, 0);
          GameObject Handle_Slide_Area = new GameObject("Handle Slide Area", typeof(RectTransform));
          Handle_Slide_Area.transform.SetParent(Slider.transform);
          Handle_Slide_Area.GetComponent<RectTransform>().anchorMin = new Vector2 (0f, 0f);
          Handle_Slide_Area.GetComponent<RectTransform>().anchorMax = new Vector2 (1f, 1f);
          Handle_Slide_Area.GetComponent<RectTransform>().sizeDelta = new Vector2 (-20,0);
          Handle_Slide_Area.GetComponent<RectTransform>().position = new Vector3(0,0,0);
          GameObject Handle = new GameObject("Handle", typeof(Image));
          Handle.transform.SetParent(Handle_Slide_Area.transform);
          Handle.GetComponent<Image>().sprite = Sprite.Create(Knob_Sprite, new Rect(0.0f, 0.0f, Knob_Sprite.width, Knob_Sprite.height), new Vector2(20f, 20f), 200.0f, 0, SpriteMeshType.Tight, new Vector4(0,0,0,0));
          Handle.GetComponent<RectTransform>().localPosition = new Vector3(0,0,0); 
          Handle.GetComponent<RectTransform>().sizeDelta = new Vector2 (20,0);
          Slider.GetComponent<Slider>().handleRect = Handle.GetComponent<RectTransform>();
          Slider.GetComponent<Slider>().targetGraphic = Handle.GetComponent<Image>();
       }
    }
    public GameObject Canvas;
}
